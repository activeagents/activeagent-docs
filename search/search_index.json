{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Active Agent","text":"<p>Active Agent is a powerful tool for building and deploying AI agents. It provides a simple and flexible framework for creating agents as controller classes that can interact with users, process data, and perform tasks.</p>"},{"location":"#components","title":"Components","text":""},{"location":"#install","title":"Install","text":""},{"location":"#gemfile","title":"Gemfile","text":"<p><code>gem 'activeagent'</code></p>"},{"location":"#cli","title":"CLI","text":"<p><code>gem install activeagent</code></p>"},{"location":"#rails-generator","title":"Rails Generator","text":"<p>After installing the gem, run the Rails installation generator:</p> <pre><code>$ rails generate active_agent:install\n</code></pre> <p>This will create: <pre><code>create  config/active_agent.yml\ncreate  app/agents/application_agent.rb\ncreate  app/agents\n</code></pre></p> <ul> <li>A YAML configuration file for provider settings, such as OpenAI and might include environment-specific configurations:</li> </ul> <p><pre><code># config/active_agent.yml\ndevelopment:\n  openai:\n    service: \"OpenAI\"\n    api_key: &lt;%= Rails.application.credentials.dig(:openai, :api_key) %&gt;\n    model: \"gpt-3.5-turbo\"\n    temperature: 0.7\n  ollama:\n    service: \"Local Ollama\"\n    model: \"llama3.2\"\n    temperature: 0.7\n\nproduction:\n  openai:\n    service: \"OpenAI\"\n    api_key: &lt;%= Rails.application.credentials.dig(:openai, :api_key) %&gt;\n    model: \"gpt-3.5-turbo\"\n    temperature: 0.7\n</code></pre> - A base application agent class <pre><code># app/agents/application_agent.rb\nclass ApplicationAgent &lt; ActiveAgent::Base\n  layout 'agent'\n\n  def prompt\n    super { |format| format.text { render plain: params[:message] } }\n  end\n</code></pre> - The agents directory structure</p>"},{"location":"#agent","title":"Agent","text":"<p>Create agents that take instructions, prompts, and perform actions</p>"},{"location":"#rails-generator_1","title":"Rails Generator","text":"<p>To use the Rails Active Agent generator to create a new agent and the associated views for the requested action prompts:</p> <p><pre><code>$ rails generate active_agent:agent travel search book plans \n</code></pre> This will create: <pre><code>create  app/agents/travel_agent.rb\ncreate  app/views/agents/travel/search.text.erb\ncreate  app/views/agents/travel/book.text.erb\ncreate  app/views/agents/travel/plans.text.erb\n</code></pre></p> <p>The generator creates: - An agent class inheriting from ApplicationAgent - Text template views for each action - Action methods in the agent class for processing prompts</p>"},{"location":"#agent-actions","title":"Agent Actions","text":"app/agents/travel_agent.rb<pre><code>class TravelAgent &lt; ApplicationAgent\n  def search\n    prompt { |format| format.text { render plain: \"Searching for travel options\" } } # (1)\n  end\n\n  def book\n    prompt { |format| format.text { render plain: \"Booking travel plans\" } }\n  end\n\n  def plans\n    prompt { |format| format.text { render plain: \"Making travel plans\" } }\n  end\nend\n</code></pre> <ol> <li>The <code>prompt</code> method is called to generate a response based on the action method. The <code>format</code> block allows you to specify the format of the response, such as plain text or HTML.</li> </ol>"},{"location":"#action-prompt","title":"Action Prompt","text":"<p>Action Prompt provides the structured interface for composing AI interactions through messages, actions/tools, and conversation context. Read more about Action Prompt</p> <pre><code>agent.prompt(message: \"Find hotels in Paris\", \n      actions: [{name: \"search\", params: {query: \"hotels paris\"}}])\n</code></pre> <p>The prompt interface manages: - Message content and roles (system/user/assistant) - Action/tool definitions and requests - Headers and context tracking - Content types and multipart handling</p>"},{"location":"#generation-provider","title":"Generation Provider","text":"<p>Generation Provider defines how prompts are sent to AI services for completion and embedding generation. Read more about Generation Providers</p> <pre><code>class VacationAgent &lt; ActiveAgent::Base\n  generate_with :openai, \n  model: \"gpt-4\",\n  temperature: 0.7\n\n  embed_with :openai,\n  model: \"text-embedding-ada-002\" \nend\n</code></pre> <p>Providers handle: - API client configuration - Prompt/completion generation - Stream processing - Embedding generation - Context management - Error handling</p>"},{"location":"#queue-generation","title":"Queue Generation","text":"<p>Active Agent also supports queued generation with Active Job using a common Generation Job interface.</p>"},{"location":"#perform-actions","title":"Perform actions","text":"<p>Active Agents can define methods that are autoloaded as callable tools. These actions\u2019 default schema will be provided to the agent\u2019s context as part of the prompt request to the Generation Provider.</p>"},{"location":"#actions","title":"Actions","text":"<pre><code>def get_cat_image_base64  \n  uri = URI(\"https://cataas.com/cat\")  \n  response = Net::HTTP.get_response(uri)\n\n  if response.is_a?(Net::HTTPSuccess)  \n    image_data = response.body  \n    Base64.strict_encode64(image_data)  \n  else  \n    raise \"Failed to fetch cat image. Status code: #{response.code}\"  \n  end  \nend\n\nclass SupportAgent &lt; ActiveAgent  \n  generate_with :openai,  \n    model: \"gpt-4o\",  \n    instructions: \"Help people with their problems\",  \n    temperature: 0.7\n\n   def get_cat_image  \n    prompt { |format| format.text { render plain: get_cat_image_base64 } }  \n  end  \nend  \n</code></pre>"},{"location":"#prompts","title":"Prompts","text":""},{"location":"#basic","title":"Basic","text":""},{"location":"#plain-text-prompt-and-response-templates","title":"Plain text prompt and response templates","text":""},{"location":"#html","title":"HTML","text":""},{"location":"#action-schema-json","title":"Action Schema JSON","text":"<p>response = SupportAgent.prompt(\u2018show me a picture of a cat\u2019).generate_now</p> <p>response.message</p>"}]}